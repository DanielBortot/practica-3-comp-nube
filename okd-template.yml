kind: Template
apiVersion: v1
metadata:
  name: directories-ws-template
  annotations:
    description: >-
      Platilla de despliegue para directories-ws-template
    tags: "dajngo,python"
    openshift.io/documentation-url: "https://github.com/DanielBortot/practica-3-comp-nube"
    openshift.io/suport-url: "https://github.com/DanielBortot/practica-3-comp-nube"

parameters:
  - name: APP_NAME
    description: Nombre de applicaci贸n (Prefijo de todos los objetos).
    required: true

  - name: DB_USER
    description: Nombre de usario para conexi贸n a la base de datos.
    required: true

  - name: DB_PASSWORD
    description: Password de usuario para conexi贸n a la base de datos.
    required: true

  - name: PORT
    description: Puerto aplicacion.
    required: true

  - name: DB_NAME
    description: Nombre base de datos.
    required: true

  - name: DB_HOST
    description: Host base de datos.
    required: true

  - name: DOMAIN_NAME
    description: Nombre de dominio para la publicaci贸n de la ruta.
    required: true

  - name: PROJECT_NAME
    description: Nombre de projecto
    required: true

  - name: IMAGE_NAME
    required: true

labels:
  app: "${APP_NAME}"

objects:

  - kind: Secret
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-keys"
    type: Opaque
    stringData:
      db_password: '${DB_PASSWORD}'
      db_user: '${DB_USER}'

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-appserver"
    spec:
      ports:
        - name: appserver
          port: 3000
          targetPort: 3000
      selector:
        name: "${APP_NAME}-appserver"

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}-appserver
      name: ${APP_NAME}-appserver
    spec:
      host: ${DOMAIN_NAME}
      port:
        targetPort: appserver
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}-appserver
        weight: 100
      wildcardPolicy: None

  - apiVersion: v1
    kind: Service
    metadata:
      name: '${APP_NAME}-mng'
    spec:
      type: ClusterIP
      ports:
        - name: mongodb
          port: 27017
          protocol: TCP
          targetPort: 27017
      selector:
        name: '${APP_NAME}-mng'

  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: '${APP_NAME}-mng'
    spec:
      replicas: 1
      selector:
        name: ${APP_NAME}-mng
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: "${APP_NAME}-mng"
        spec:
          containers:
            - env:
              - name: MONGODB_USER
                valueFrom:
                  secretKeyRef:
                    name: "${APP_NAME}-keys"
                    key: db_user
              - name: MONGODB_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: "${APP_NAME}-keys"
                    key: db_password
              image: ' '
              imagePullPolicy: Always
              livenessProbe:
                exec:
                  command:
                    - /usr/libexec/check-container
                    - '--live'
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 10
              name: mongodb
              ports:
                - containerPort: 27017
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/libexec/check-container
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: "1G"
                requests:
                  memory: "1G"
              volumeMounts:
                - mountPath: /data/db 
                  name: mongo-data
                  subPath: mng-data
          restartPolicy: Always
          securityContext:
            supplementalGroups:
              - 5688
          volumes:
            - name: mongo-data
              persistentVolumeClaim:
                claimName: "data"
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - mongodb
            from:
              kind: ImageStreamTag
              name: 'mongodb:latest' # mongo:latest
              namespace: 'openshift'
            lastTriggeredImage: ''
          type: ImageChange
        - type: ConfigChange

  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: "${APP_NAME}-appserver"
    spec:
      replicas: 1
      selector:
        name: "${APP_NAME}-appserver"
      
      template:
        metadata:
          labels:
            app: "${APP_NAME}-appserver"
            name: "${APP_NAME}-appserver"
        spec:
          containers:
            - image: ' '
              imagePullPolicy: Always
              name: appserver
              args:
                - appserver
              env:
                - name: DB_HOST
                  value: "${DB_HOST}"

                - name: PORT
                  value: "${PORT}"

                - name: DB_USER
                  value: "${DB_USER}"

                - name: DB_PASSWORD
                  value: "${DB_PASSWORD}"

                - name: DB_NAME
                  value: "${DB_NAME}"
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                limits:
                  memory: "256M"
                requests:
                  memory: "256M"
          restartPolicy: Always
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - appserver
            from:
              kind: ImageStreamTag
              name: ${IMAGE_NAME}
              namespace: ${PROJECT_NAME}
            lastTriggeredImage: ''
          type: ImageChange
        - type: ConfigChange